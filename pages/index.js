import React from 'react';
import {Doughnut} from 'react-chartjs-2';
import Head from 'next/head'
import Image from 'next/image'
import {
  ApolloClient,
  InMemoryCache,
  createHttpLink,
  gql
} from "@apollo/client";
import styles from '../styles/Home.module.css';
import { setContext } from '@apollo/client/link/context';


export default function Home({viewer}) {
console.log(viewer.user.repositories.edges.map(node => {
  return node.node.name
}))

  console.log('viewer', viewer)
  return (
    <div className={styles.container}>
      <Head>
        <title>Sourcerer</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          {/* name */}
          Welcome {viewer.user.name}
        </h1>

        <p className={styles.description}>
          {/* bio */}
          <code className={styles.code}>{viewer.user.bio} </code>
        </p>

        <div className={styles.grid}>
        <a className={styles.card}>
            {/* avatar */}
           {/* <Image src={require(viewer.user.avatarURL)}/ width={128} height={77}> */}
          </a>

          <a className={styles.card}>
            <h2> Commits &rarr;</h2>
            <p>{viewer.totalCommitContributions}</p>
          </a>

          <a  className={styles.card}>
            <h2>Repositories &rarr;</h2>
            <p>{viewer.user.repositories.totalCount}</p>
          </a>

          <a
            className={styles.card}
          >
            <h2>Followers &rarr;</h2>
            <p>{viewer.user.followers.totalCount}</p>
          </a>
          <a
            
            className={styles.card}
          >
            <h2>Following &rarr;</h2>
            <p>{viewer.user.following.totalCount}</p>
          </a>
          
        </div>
        <div>
</div>
<div className={styles.languages}>        
  <h1>Repository detail</h1>
  <p>
  {viewer.user.repositories.edges.map(repository => {
  return (
    <a>
      <p>
        <h2>{repository.node.name}</h2>
        <h4> Languages </h4>

        <p>  {repository.node.languages.edges.map(nodes => {
    return (<a> 
      
       {nodes.node.name} 
      <p><b > color code: {nodes.node.color}  </b></p>
      
      </a>
      )
  })
}
</p>
</p>
    </a>
    )
})}

  </p>
  
  </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

export async function getStaticProps(){
  
  const httpLink = createHttpLink({
    uri: 'https://api.github.com/graphql',
  });
  const authLink = setContext((_, { headers }) => {
    // return the headers to the context so httpLink can read them
    return {
      headers: {
        ...headers,
        authorization: `Bearer ${process.env.GITHUB_ACESS_TOKEN}`,
      }
    }
  });
  
  const client = new ApolloClient({
    link: authLink.concat(httpLink),
    cache: new InMemoryCache()
  });

  const {data} =  await client.query({
    query: gql`
    {
      viewer {
        contributionsCollection(from: "2019-06-12T03:29:56.901Z") {
          totalCommitContributions
          user {
            followers {
              totalCount
            }
            following {
              totalCount
            }
            repositories(last: 20) {
              totalCount
              edges {
                node {
                  languages(last: 10) {
                    totalCount
                    edges {
                      node {
                        name
                        color
                      }
                    }
                  }
                  name
                }
              }
            }
            bio
            avatarUrl
            name
            login
          }
        }
      }
    }
    
    
   
    `
  })

  const{viewer}=data;
  const{total_commit} = viewer.contributionsCollection.user;


  
  console.log(viewer);
  console.log(total_commit);

  return{
    props: {
      viewer : viewer.contributionsCollection

    }
  }
}


